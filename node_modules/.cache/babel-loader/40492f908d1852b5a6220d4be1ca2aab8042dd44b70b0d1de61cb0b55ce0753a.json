{"ast":null,"code":"// Chat service using HTTP requests for true cross-browser/device communication\n// Works across different browsers and devices with minimal server\n\nclass ChatService {\n  constructor() {\n    this.messages = [];\n    this.currentUser = null;\n    this.messageListeners = [];\n    this.userListeners = [];\n    this.activeUsers = new Set();\n    this.pollInterval = null;\n    this.sessionId = Date.now() + Math.random().toString(36);\n    this.serverUrl = 'http://localhost:3001/api';\n\n    // Start polling for updates\n    this.startPolling();\n\n    // Load initial data\n    this.loadInitialData();\n\n    // Cleanup when page unloads\n    window.addEventListener('beforeunload', () => {\n      this.cleanup();\n    });\n  }\n\n  // Start polling for changes\n  startPolling() {\n    this.pollInterval = setInterval(() => {\n      this.fetchUpdates();\n      if (this.currentUser) {\n        this.sendHeartbeat();\n      }\n    }, 1000); // Poll every second\n  }\n\n  // Load initial data from server\n  async loadInitialData() {\n    try {\n      const response = await fetch(`${this.serverUrl}/chat`);\n      if (response.ok) {\n        const data = await response.json();\n        this.messages = data.messages || [];\n        this.activeUsers = new Set(data.activeUsers || []);\n        this.notifyMessageListeners();\n        this.notifyUserListeners();\n      }\n    } catch (error) {\n      console.log('Server not available yet, using local mode');\n      // Fallback to localStorage for development\n      this.loadFromLocalStorage();\n    }\n  }\n\n  // Fallback to localStorage\n  loadFromLocalStorage() {\n    try {\n      const messages = localStorage.getItem('fallback_messages');\n      if (messages) {\n        this.messages = JSON.parse(messages);\n        this.notifyMessageListeners();\n      }\n    } catch (error) {\n      console.error('Error loading from localStorage:', error);\n    }\n  }\n\n  // Fetch updates from server\n  async fetchUpdates() {\n    try {\n      const response = await fetch(`${this.serverUrl}/chat`);\n      if (response.ok) {\n        const data = await response.json();\n\n        // Update messages if changed\n        if (JSON.stringify(data.messages) !== JSON.stringify(this.messages)) {\n          this.messages = data.messages || [];\n          this.notifyMessageListeners();\n        }\n\n        // Update active users if changed\n        const newActiveUsers = new Set(data.activeUsers || []);\n        if (newActiveUsers.size !== this.activeUsers.size || !Array.from(newActiveUsers).every(user => this.activeUsers.has(user))) {\n          this.activeUsers = newActiveUsers;\n          this.notifyUserListeners();\n        }\n      }\n    } catch (error) {\n      // Server not available, use localStorage fallback\n      this.syncWithLocalStorage();\n    }\n  }\n\n  // Sync with localStorage as fallback\n  syncWithLocalStorage() {\n    try {\n      // Check for localStorage changes (for same-browser communication)\n      const messages = localStorage.getItem('fallback_messages');\n      if (messages) {\n        const parsedMessages = JSON.parse(messages);\n        if (JSON.stringify(parsedMessages) !== JSON.stringify(this.messages)) {\n          this.messages = parsedMessages;\n          this.notifyMessageListeners();\n        }\n      }\n    } catch (error) {\n      console.error('Error syncing with localStorage:', error);\n    }\n  }\n\n  // Send heartbeat to server\n  async sendHeartbeat() {\n    if (!this.currentUser) return;\n    try {\n      const response = await fetch(`${this.serverUrl}/heartbeat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username: this.currentUser,\n          sessionId: this.sessionId\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        const newActiveUsers = new Set(data.activeUsers || []);\n        if (newActiveUsers.size !== this.activeUsers.size || !Array.from(newActiveUsers).every(user => this.activeUsers.has(user))) {\n          this.activeUsers = newActiveUsers;\n          this.notifyUserListeners();\n        }\n      }\n    } catch (error) {\n      // Server not available, continue with current state\n    }\n  }\n\n  // Set current user\n  setCurrentUser(username) {\n    this.currentUser = username;\n    if (username) {\n      this.sendHeartbeat();\n    }\n  }\n\n  // Send a message\n  async sendMessage(text) {\n    if (!this.currentUser || !text.trim()) return;\n    const message = {\n      id: Date.now() + Math.random(),\n      text: text.trim(),\n      sender: this.currentUser,\n      timestamp: new Date().toISOString()\n    };\n    try {\n      // Try to send to server first\n      const response = await fetch(`${this.serverUrl}/message`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: message.text,\n          sender: message.sender,\n          sessionId: this.sessionId\n        })\n      });\n      if (response.ok) {\n        // Server handled it, fetch latest data\n        this.fetchUpdates();\n      } else {\n        throw new Error('Server request failed');\n      }\n    } catch (error) {\n      // Fallback to localStorage\n      this.messages.push(message);\n      localStorage.setItem('fallback_messages', JSON.stringify(this.messages));\n      this.notifyMessageListeners();\n    }\n  }\n\n  // Get all messages\n  getMessages() {\n    return [...this.messages];\n  }\n\n  // Get active users\n  getActiveUsers() {\n    return Array.from(this.activeUsers);\n  }\n\n  // Clear all messages\n  async clearChat() {\n    try {\n      const response = await fetch(`${this.serverUrl}/clear`, {\n        method: 'POST'\n      });\n      if (response.ok) {\n        this.messages = [];\n        this.notifyMessageListeners();\n      }\n    } catch (error) {\n      // Fallback to localStorage\n      this.messages = [];\n      localStorage.setItem('fallback_messages', JSON.stringify(this.messages));\n      this.notifyMessageListeners();\n    }\n  }\n\n  // Add message listener\n  onMessage(callback) {\n    this.messageListeners.push(callback);\n    return () => {\n      this.messageListeners = this.messageListeners.filter(cb => cb !== callback);\n    };\n  }\n\n  // Add user listener\n  onUsersChange(callback) {\n    this.userListeners.push(callback);\n    return () => {\n      this.userListeners = this.userListeners.filter(cb => cb !== callback);\n    };\n  }\n\n  // Notify message listeners\n  notifyMessageListeners() {\n    this.messageListeners.forEach(callback => {\n      try {\n        callback([...this.messages]);\n      } catch (error) {\n        console.error('Message listener error:', error);\n      }\n    });\n  }\n\n  // Notify user listeners\n  notifyUserListeners() {\n    this.userListeners.forEach(callback => {\n      try {\n        callback(Array.from(this.activeUsers));\n      } catch (error) {\n        console.error('User listener error:', error);\n      }\n    });\n  }\n\n  // Cleanup when leaving\n  cleanup() {\n    if (this.pollInterval) {\n      clearInterval(this.pollInterval);\n    }\n  }\n}\n\n// Create singleton instance\nconst chatService = new ChatService();\nexport default chatService;","map":{"version":3,"names":["ChatService","constructor","messages","currentUser","messageListeners","userListeners","activeUsers","Set","pollInterval","sessionId","Date","now","Math","random","toString","serverUrl","startPolling","loadInitialData","window","addEventListener","cleanup","setInterval","fetchUpdates","sendHeartbeat","response","fetch","ok","data","json","notifyMessageListeners","notifyUserListeners","error","console","log","loadFromLocalStorage","localStorage","getItem","JSON","parse","stringify","newActiveUsers","size","Array","from","every","user","has","syncWithLocalStorage","parsedMessages","method","headers","body","username","setCurrentUser","sendMessage","text","trim","message","id","sender","timestamp","toISOString","Error","push","setItem","getMessages","getActiveUsers","clearChat","onMessage","callback","filter","cb","onUsersChange","forEach","clearInterval","chatService"],"sources":["/home/niroj/Desktop/chatapp/src/utils/chatService.js"],"sourcesContent":["// Chat service using HTTP requests for true cross-browser/device communication\n// Works across different browsers and devices with minimal server\n\nclass ChatService {\n  constructor() {\n    this.messages = [];\n    this.currentUser = null;\n    this.messageListeners = [];\n    this.userListeners = [];\n    this.activeUsers = new Set();\n    this.pollInterval = null;\n    this.sessionId = Date.now() + Math.random().toString(36);\n    this.serverUrl = 'http://localhost:3001/api';\n    \n    // Start polling for updates\n    this.startPolling();\n    \n    // Load initial data\n    this.loadInitialData();\n    \n    // Cleanup when page unloads\n    window.addEventListener('beforeunload', () => {\n      this.cleanup();\n    });\n  }\n\n  // Start polling for changes\n  startPolling() {\n    this.pollInterval = setInterval(() => {\n      this.fetchUpdates();\n      if (this.currentUser) {\n        this.sendHeartbeat();\n      }\n    }, 1000); // Poll every second\n  }\n\n  // Load initial data from server\n  async loadInitialData() {\n    try {\n      const response = await fetch(`${this.serverUrl}/chat`);\n      if (response.ok) {\n        const data = await response.json();\n        this.messages = data.messages || [];\n        this.activeUsers = new Set(data.activeUsers || []);\n        this.notifyMessageListeners();\n        this.notifyUserListeners();\n      }\n    } catch (error) {\n      console.log('Server not available yet, using local mode');\n      // Fallback to localStorage for development\n      this.loadFromLocalStorage();\n    }\n  }\n\n  // Fallback to localStorage\n  loadFromLocalStorage() {\n    try {\n      const messages = localStorage.getItem('fallback_messages');\n      if (messages) {\n        this.messages = JSON.parse(messages);\n        this.notifyMessageListeners();\n      }\n    } catch (error) {\n      console.error('Error loading from localStorage:', error);\n    }\n  }\n\n  // Fetch updates from server\n  async fetchUpdates() {\n    try {\n      const response = await fetch(`${this.serverUrl}/chat`);\n      if (response.ok) {\n        const data = await response.json();\n        \n        // Update messages if changed\n        if (JSON.stringify(data.messages) !== JSON.stringify(this.messages)) {\n          this.messages = data.messages || [];\n          this.notifyMessageListeners();\n        }\n        \n        // Update active users if changed\n        const newActiveUsers = new Set(data.activeUsers || []);\n        if (newActiveUsers.size !== this.activeUsers.size || \n            !Array.from(newActiveUsers).every(user => this.activeUsers.has(user))) {\n          this.activeUsers = newActiveUsers;\n          this.notifyUserListeners();\n        }\n      }\n    } catch (error) {\n      // Server not available, use localStorage fallback\n      this.syncWithLocalStorage();\n    }\n  }\n\n  // Sync with localStorage as fallback\n  syncWithLocalStorage() {\n    try {\n      // Check for localStorage changes (for same-browser communication)\n      const messages = localStorage.getItem('fallback_messages');\n      if (messages) {\n        const parsedMessages = JSON.parse(messages);\n        if (JSON.stringify(parsedMessages) !== JSON.stringify(this.messages)) {\n          this.messages = parsedMessages;\n          this.notifyMessageListeners();\n        }\n      }\n    } catch (error) {\n      console.error('Error syncing with localStorage:', error);\n    }\n  }\n\n  // Send heartbeat to server\n  async sendHeartbeat() {\n    if (!this.currentUser) return;\n\n    try {\n      const response = await fetch(`${this.serverUrl}/heartbeat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          username: this.currentUser,\n          sessionId: this.sessionId\n        })\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        const newActiveUsers = new Set(data.activeUsers || []);\n        if (newActiveUsers.size !== this.activeUsers.size || \n            !Array.from(newActiveUsers).every(user => this.activeUsers.has(user))) {\n          this.activeUsers = newActiveUsers;\n          this.notifyUserListeners();\n        }\n      }\n    } catch (error) {\n      // Server not available, continue with current state\n    }\n  }\n\n  // Set current user\n  setCurrentUser(username) {\n    this.currentUser = username;\n    if (username) {\n      this.sendHeartbeat();\n    }\n  }\n\n  // Send a message\n  async sendMessage(text) {\n    if (!this.currentUser || !text.trim()) return;\n\n    const message = {\n      id: Date.now() + Math.random(),\n      text: text.trim(),\n      sender: this.currentUser,\n      timestamp: new Date().toISOString()\n    };\n\n    try {\n      // Try to send to server first\n      const response = await fetch(`${this.serverUrl}/message`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          text: message.text,\n          sender: message.sender,\n          sessionId: this.sessionId\n        })\n      });\n\n      if (response.ok) {\n        // Server handled it, fetch latest data\n        this.fetchUpdates();\n      } else {\n        throw new Error('Server request failed');\n      }\n    } catch (error) {\n      // Fallback to localStorage\n      this.messages.push(message);\n      localStorage.setItem('fallback_messages', JSON.stringify(this.messages));\n      this.notifyMessageListeners();\n    }\n  }\n\n  // Get all messages\n  getMessages() {\n    return [...this.messages];\n  }\n\n  // Get active users\n  getActiveUsers() {\n    return Array.from(this.activeUsers);\n  }\n\n  // Clear all messages\n  async clearChat() {\n    try {\n      const response = await fetch(`${this.serverUrl}/clear`, {\n        method: 'POST',\n      });\n\n      if (response.ok) {\n        this.messages = [];\n        this.notifyMessageListeners();\n      }\n    } catch (error) {\n      // Fallback to localStorage\n      this.messages = [];\n      localStorage.setItem('fallback_messages', JSON.stringify(this.messages));\n      this.notifyMessageListeners();\n    }\n  }\n\n  // Add message listener\n  onMessage(callback) {\n    this.messageListeners.push(callback);\n    return () => {\n      this.messageListeners = this.messageListeners.filter(cb => cb !== callback);\n    };\n  }\n\n  // Add user listener\n  onUsersChange(callback) {\n    this.userListeners.push(callback);\n    return () => {\n      this.userListeners = this.userListeners.filter(cb => cb !== callback);\n    };\n  }\n\n  // Notify message listeners\n  notifyMessageListeners() {\n    this.messageListeners.forEach(callback => {\n      try {\n        callback([...this.messages]);\n      } catch (error) {\n        console.error('Message listener error:', error);\n      }\n    });\n  }\n\n  // Notify user listeners\n  notifyUserListeners() {\n    this.userListeners.forEach(callback => {\n      try {\n        callback(Array.from(this.activeUsers));\n      } catch (error) {\n        console.error('User listener error:', error);\n      }\n    });\n  }\n\n  // Cleanup when leaving\n  cleanup() {\n    if (this.pollInterval) {\n      clearInterval(this.pollInterval);\n    }\n  }\n}\n\n// Create singleton instance\nconst chatService = new ChatService();\n\nexport default chatService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}