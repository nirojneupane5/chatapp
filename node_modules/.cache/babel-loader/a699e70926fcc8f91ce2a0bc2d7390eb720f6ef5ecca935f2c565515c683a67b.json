{"ast":null,"code":"// Simple chat service that works across browsers using localStorage\n// Uses polling and storage events for cross-browser communication\n\nclass ChatService {\n  constructor() {\n    this.messages = [];\n    this.currentUser = null;\n    this.messageListeners = [];\n    this.userListeners = [];\n    this.activeUsers = new Set();\n    this.pollInterval = null;\n    this.sessionId = Date.now() + Math.random().toString(36);\n\n    // Storage keys\n    this.STORAGE_KEYS = {\n      MESSAGES: 'global_chat_messages',\n      USERS: 'global_chat_users',\n      HEARTBEAT: 'global_chat_heartbeat'\n    };\n\n    // Listen for storage events (works across tabs in same browser)\n    window.addEventListener('storage', e => {\n      this.handleStorageChange(e);\n    });\n\n    // Cleanup when page unloads\n    window.addEventListener('beforeunload', () => {\n      this.cleanup();\n    });\n\n    // Start polling for updates\n    this.startPolling();\n\n    // Load initial data\n    this.loadInitialData();\n  }\n\n  // Start polling for changes\n  startPolling() {\n    this.pollInterval = setInterval(() => {\n      this.checkForUpdates();\n      this.sendHeartbeat();\n      this.cleanupInactiveUsers();\n    }, 500); // Poll every 500ms for faster updates\n  }\n\n  // Load initial data\n  loadInitialData() {\n    try {\n      const messages = localStorage.getItem(this.STORAGE_KEYS.MESSAGES);\n      if (messages) {\n        this.messages = JSON.parse(messages);\n        this.notifyMessageListeners();\n      }\n      const users = localStorage.getItem(this.STORAGE_KEYS.USERS);\n      if (users) {\n        const userData = JSON.parse(users);\n        this.activeUsers = new Set(userData.users || []);\n        this.notifyUserListeners();\n      }\n    } catch (error) {\n      console.error('Error loading initial data:', error);\n      this.messages = [];\n      this.activeUsers = new Set();\n    }\n  }\n\n  // Check for updates (for cross-browser communication)\n  checkForUpdates() {\n    try {\n      // Check messages\n      const messages = localStorage.getItem(this.STORAGE_KEYS.MESSAGES);\n      if (messages) {\n        const newMessages = JSON.parse(messages);\n        if (JSON.stringify(newMessages) !== JSON.stringify(this.messages)) {\n          this.messages = newMessages;\n          this.notifyMessageListeners();\n        }\n      }\n\n      // Check users\n      const users = localStorage.getItem(this.STORAGE_KEYS.USERS);\n      if (users) {\n        const userData = JSON.parse(users);\n        const newUsers = new Set(userData.users || []);\n        if (newUsers.size !== this.activeUsers.size || !Array.from(newUsers).every(user => this.activeUsers.has(user))) {\n          this.activeUsers = newUsers;\n          this.notifyUserListeners();\n        }\n      }\n    } catch (error) {\n      console.error('Error checking for updates:', error);\n    }\n  }\n\n  // Handle storage events\n  handleStorageChange(event) {\n    if (event.key === this.STORAGE_KEYS.MESSAGES && event.newValue) {\n      try {\n        this.messages = JSON.parse(event.newValue);\n        this.notifyMessageListeners();\n      } catch (error) {\n        console.error('Error handling message storage change:', error);\n      }\n    } else if (event.key === this.STORAGE_KEYS.USERS && event.newValue) {\n      try {\n        const userData = JSON.parse(event.newValue);\n        this.activeUsers = new Set(userData.users || []);\n        this.notifyUserListeners();\n      } catch (error) {\n        console.error('Error handling user storage change:', error);\n      }\n    }\n  }\n\n  // Send heartbeat\n  sendHeartbeat() {\n    if (!this.currentUser) return;\n    try {\n      const heartbeats = JSON.parse(localStorage.getItem(this.STORAGE_KEYS.HEARTBEAT) || '{}');\n      heartbeats[this.sessionId] = {\n        username: this.currentUser,\n        timestamp: Date.now()\n      };\n      localStorage.setItem(this.STORAGE_KEYS.HEARTBEAT, JSON.stringify(heartbeats));\n    } catch (error) {\n      console.error('Error sending heartbeat:', error);\n    }\n  }\n\n  // Clean up inactive users\n  cleanupInactiveUsers() {\n    try {\n      const heartbeats = JSON.parse(localStorage.getItem(this.STORAGE_KEYS.HEARTBEAT) || '{}');\n      const now = Date.now();\n      const activeUsers = new Set();\n\n      // Check which users are still active (within 3 seconds)\n      Object.entries(heartbeats).forEach(([sessionId, data]) => {\n        if (now - data.timestamp < 3000) {\n          activeUsers.add(data.username);\n        } else {\n          delete heartbeats[sessionId];\n        }\n      });\n\n      // Update storage\n      localStorage.setItem(this.STORAGE_KEYS.HEARTBEAT, JSON.stringify(heartbeats));\n\n      // Update active users\n      const userData = {\n        users: Array.from(activeUsers),\n        timestamp: Date.now()\n      };\n      localStorage.setItem(this.STORAGE_KEYS.USERS, JSON.stringify(userData));\n      if (this.activeUsers.size !== activeUsers.size || !Array.from(activeUsers).every(user => this.activeUsers.has(user))) {\n        this.activeUsers = activeUsers;\n        this.notifyUserListeners();\n      }\n    } catch (error) {\n      console.error('Error cleaning up inactive users:', error);\n    }\n  }\n\n  // Set current user\n  setCurrentUser(username) {\n    this.currentUser = username;\n    if (username) {\n      this.sendHeartbeat();\n    }\n  }\n\n  // Send a message\n  sendMessage(text) {\n    if (!this.currentUser || !text.trim()) return;\n    const message = {\n      id: Date.now() + Math.random(),\n      text: text.trim(),\n      sender: this.currentUser,\n      timestamp: new Date().toISOString()\n    };\n    try {\n      this.messages.push(message);\n      this.messages.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\n\n      // Save to localStorage\n      localStorage.setItem(this.STORAGE_KEYS.MESSAGES, JSON.stringify(this.messages));\n      this.notifyMessageListeners();\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  }\n\n  // Get all messages\n  getMessages() {\n    return [...this.messages];\n  }\n\n  // Get active users\n  getActiveUsers() {\n    return Array.from(this.activeUsers);\n  }\n\n  // Clear all messages\n  clearChat() {\n    try {\n      this.messages = [];\n      localStorage.setItem(this.STORAGE_KEYS.MESSAGES, JSON.stringify(this.messages));\n      this.notifyMessageListeners();\n    } catch (error) {\n      console.error('Error clearing chat:', error);\n    }\n  }\n\n  // Add message listener\n  onMessage(callback) {\n    this.messageListeners.push(callback);\n    return () => {\n      this.messageListeners = this.messageListeners.filter(cb => cb !== callback);\n    };\n  }\n\n  // Add user listener\n  onUsersChange(callback) {\n    this.userListeners.push(callback);\n    return () => {\n      this.userListeners = this.userListeners.filter(cb => cb !== callback);\n    };\n  }\n\n  // Notify message listeners\n  notifyMessageListeners() {\n    this.messageListeners.forEach(callback => {\n      try {\n        callback([...this.messages]);\n      } catch (error) {\n        console.error('Message listener error:', error);\n      }\n    });\n  }\n\n  // Notify user listeners\n  notifyUserListeners() {\n    this.userListeners.forEach(callback => {\n      try {\n        callback(Array.from(this.activeUsers));\n      } catch (error) {\n        console.error('User listener error:', error);\n      }\n    });\n  }\n\n  // Cleanup when leaving\n  cleanup() {\n    if (this.pollInterval) {\n      clearInterval(this.pollInterval);\n    }\n\n    // Remove our heartbeat\n    try {\n      const heartbeats = JSON.parse(localStorage.getItem(this.STORAGE_KEYS.HEARTBEAT) || '{}');\n      delete heartbeats[this.sessionId];\n      localStorage.setItem(this.STORAGE_KEYS.HEARTBEAT, JSON.stringify(heartbeats));\n    } catch (error) {\n      console.error('Error cleaning up:', error);\n    }\n  }\n}\n\n// Create singleton instance\nconst chatService = new ChatService();\nexport default chatService;","map":{"version":3,"names":["ChatService","constructor","messages","currentUser","messageListeners","userListeners","activeUsers","Set","pollInterval","sessionId","Date","now","Math","random","toString","STORAGE_KEYS","MESSAGES","USERS","HEARTBEAT","window","addEventListener","e","handleStorageChange","cleanup","startPolling","loadInitialData","setInterval","checkForUpdates","sendHeartbeat","cleanupInactiveUsers","localStorage","getItem","JSON","parse","notifyMessageListeners","users","userData","notifyUserListeners","error","console","newMessages","stringify","newUsers","size","Array","from","every","user","has","event","key","newValue","heartbeats","username","timestamp","setItem","Object","entries","forEach","data","add","setCurrentUser","sendMessage","text","trim","message","id","sender","toISOString","push","sort","a","b","getMessages","getActiveUsers","clearChat","onMessage","callback","filter","cb","onUsersChange","clearInterval","chatService"],"sources":["/home/niroj/Desktop/chatapp/src/utils/chatService.js"],"sourcesContent":["// Simple chat service that works across browsers using localStorage\n// Uses polling and storage events for cross-browser communication\n\nclass ChatService {\n  constructor() {\n    this.messages = [];\n    this.currentUser = null;\n    this.messageListeners = [];\n    this.userListeners = [];\n    this.activeUsers = new Set();\n    this.pollInterval = null;\n    this.sessionId = Date.now() + Math.random().toString(36);\n    \n    // Storage keys\n    this.STORAGE_KEYS = {\n      MESSAGES: 'global_chat_messages',\n      USERS: 'global_chat_users',\n      HEARTBEAT: 'global_chat_heartbeat'\n    };\n    \n    // Listen for storage events (works across tabs in same browser)\n    window.addEventListener('storage', (e) => {\n      this.handleStorageChange(e);\n    });\n\n    // Cleanup when page unloads\n    window.addEventListener('beforeunload', () => {\n      this.cleanup();\n    });\n\n    // Start polling for updates\n    this.startPolling();\n    \n    // Load initial data\n    this.loadInitialData();\n  }\n\n  // Start polling for changes\n  startPolling() {\n    this.pollInterval = setInterval(() => {\n      this.checkForUpdates();\n      this.sendHeartbeat();\n      this.cleanupInactiveUsers();\n    }, 500); // Poll every 500ms for faster updates\n  }\n\n  // Load initial data\n  loadInitialData() {\n    try {\n      const messages = localStorage.getItem(this.STORAGE_KEYS.MESSAGES);\n      if (messages) {\n        this.messages = JSON.parse(messages);\n        this.notifyMessageListeners();\n      }\n      \n      const users = localStorage.getItem(this.STORAGE_KEYS.USERS);\n      if (users) {\n        const userData = JSON.parse(users);\n        this.activeUsers = new Set(userData.users || []);\n        this.notifyUserListeners();\n      }\n    } catch (error) {\n      console.error('Error loading initial data:', error);\n      this.messages = [];\n      this.activeUsers = new Set();\n    }\n  }\n\n  // Check for updates (for cross-browser communication)\n  checkForUpdates() {\n    try {\n      // Check messages\n      const messages = localStorage.getItem(this.STORAGE_KEYS.MESSAGES);\n      if (messages) {\n        const newMessages = JSON.parse(messages);\n        if (JSON.stringify(newMessages) !== JSON.stringify(this.messages)) {\n          this.messages = newMessages;\n          this.notifyMessageListeners();\n        }\n      }\n      \n      // Check users\n      const users = localStorage.getItem(this.STORAGE_KEYS.USERS);\n      if (users) {\n        const userData = JSON.parse(users);\n        const newUsers = new Set(userData.users || []);\n        if (newUsers.size !== this.activeUsers.size || \n            !Array.from(newUsers).every(user => this.activeUsers.has(user))) {\n          this.activeUsers = newUsers;\n          this.notifyUserListeners();\n        }\n      }\n    } catch (error) {\n      console.error('Error checking for updates:', error);\n    }\n  }\n\n  // Handle storage events\n  handleStorageChange(event) {\n    if (event.key === this.STORAGE_KEYS.MESSAGES && event.newValue) {\n      try {\n        this.messages = JSON.parse(event.newValue);\n        this.notifyMessageListeners();\n      } catch (error) {\n        console.error('Error handling message storage change:', error);\n      }\n    } else if (event.key === this.STORAGE_KEYS.USERS && event.newValue) {\n      try {\n        const userData = JSON.parse(event.newValue);\n        this.activeUsers = new Set(userData.users || []);\n        this.notifyUserListeners();\n      } catch (error) {\n        console.error('Error handling user storage change:', error);\n      }\n    }\n  }\n\n  // Send heartbeat\n  sendHeartbeat() {\n    if (!this.currentUser) return;\n\n    try {\n      const heartbeats = JSON.parse(localStorage.getItem(this.STORAGE_KEYS.HEARTBEAT) || '{}');\n      heartbeats[this.sessionId] = {\n        username: this.currentUser,\n        timestamp: Date.now()\n      };\n      localStorage.setItem(this.STORAGE_KEYS.HEARTBEAT, JSON.stringify(heartbeats));\n    } catch (error) {\n      console.error('Error sending heartbeat:', error);\n    }\n  }\n\n  // Clean up inactive users\n  cleanupInactiveUsers() {\n    try {\n      const heartbeats = JSON.parse(localStorage.getItem(this.STORAGE_KEYS.HEARTBEAT) || '{}');\n      const now = Date.now();\n      const activeUsers = new Set();\n\n      // Check which users are still active (within 3 seconds)\n      Object.entries(heartbeats).forEach(([sessionId, data]) => {\n        if (now - data.timestamp < 3000) {\n          activeUsers.add(data.username);\n        } else {\n          delete heartbeats[sessionId];\n        }\n      });\n\n      // Update storage\n      localStorage.setItem(this.STORAGE_KEYS.HEARTBEAT, JSON.stringify(heartbeats));\n      \n      // Update active users\n      const userData = {\n        users: Array.from(activeUsers),\n        timestamp: Date.now()\n      };\n      localStorage.setItem(this.STORAGE_KEYS.USERS, JSON.stringify(userData));\n      \n      if (this.activeUsers.size !== activeUsers.size || \n          !Array.from(activeUsers).every(user => this.activeUsers.has(user))) {\n        this.activeUsers = activeUsers;\n        this.notifyUserListeners();\n      }\n    } catch (error) {\n      console.error('Error cleaning up inactive users:', error);\n    }\n  }\n\n  // Set current user\n  setCurrentUser(username) {\n    this.currentUser = username;\n    if (username) {\n      this.sendHeartbeat();\n    }\n  }\n\n  // Send a message\n  sendMessage(text) {\n    if (!this.currentUser || !text.trim()) return;\n\n    const message = {\n      id: Date.now() + Math.random(),\n      text: text.trim(),\n      sender: this.currentUser,\n      timestamp: new Date().toISOString()\n    };\n\n    try {\n      this.messages.push(message);\n      this.messages.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\n      \n      // Save to localStorage\n      localStorage.setItem(this.STORAGE_KEYS.MESSAGES, JSON.stringify(this.messages));\n      this.notifyMessageListeners();\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  }\n\n  // Get all messages\n  getMessages() {\n    return [...this.messages];\n  }\n\n  // Get active users\n  getActiveUsers() {\n    return Array.from(this.activeUsers);\n  }\n\n  // Clear all messages\n  clearChat() {\n    try {\n      this.messages = [];\n      localStorage.setItem(this.STORAGE_KEYS.MESSAGES, JSON.stringify(this.messages));\n      this.notifyMessageListeners();\n    } catch (error) {\n      console.error('Error clearing chat:', error);\n    }\n  }\n\n  // Add message listener\n  onMessage(callback) {\n    this.messageListeners.push(callback);\n    return () => {\n      this.messageListeners = this.messageListeners.filter(cb => cb !== callback);\n    };\n  }\n\n  // Add user listener\n  onUsersChange(callback) {\n    this.userListeners.push(callback);\n    return () => {\n      this.userListeners = this.userListeners.filter(cb => cb !== callback);\n    };\n  }\n\n  // Notify message listeners\n  notifyMessageListeners() {\n    this.messageListeners.forEach(callback => {\n      try {\n        callback([...this.messages]);\n      } catch (error) {\n        console.error('Message listener error:', error);\n      }\n    });\n  }\n\n  // Notify user listeners\n  notifyUserListeners() {\n    this.userListeners.forEach(callback => {\n      try {\n        callback(Array.from(this.activeUsers));\n      } catch (error) {\n        console.error('User listener error:', error);\n      }\n    });\n  }\n\n  // Cleanup when leaving\n  cleanup() {\n    if (this.pollInterval) {\n      clearInterval(this.pollInterval);\n    }\n\n    // Remove our heartbeat\n    try {\n      const heartbeats = JSON.parse(localStorage.getItem(this.STORAGE_KEYS.HEARTBEAT) || '{}');\n      delete heartbeats[this.sessionId];\n      localStorage.setItem(this.STORAGE_KEYS.HEARTBEAT, JSON.stringify(heartbeats));\n    } catch (error) {\n      console.error('Error cleaning up:', error);\n    }\n  }\n}\n\n// Create singleton instance\nconst chatService = new ChatService();\n\nexport default chatService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}