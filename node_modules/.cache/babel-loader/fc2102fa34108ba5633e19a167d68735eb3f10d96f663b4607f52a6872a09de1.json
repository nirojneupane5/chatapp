{"ast":null,"code":"// Chat service using localStorage and storage events for cross-browser/device communication\n// Works across different browsers and devices on the same network\n\nclass ChatService {\n  constructor() {\n    this.messages = [];\n    this.currentUser = null;\n    this.messageListeners = [];\n    this.userListeners = [];\n    this.activeUsers = new Set();\n    this.pollInterval = null;\n    this.lastMessageCount = 0;\n    this.lastUserUpdate = 0;\n    this.sessionId = Date.now() + Math.random(); // Unique session ID\n\n    // Storage keys\n    this.STORAGE_KEYS = {\n      MESSAGES: 'chatapp_messages',\n      USERS: 'chatapp_active_users',\n      HEARTBEAT: 'chatapp_heartbeat'\n    };\n\n    // Listen for storage events (works across browsers on same device)\n    window.addEventListener('storage', e => {\n      this.handleStorageChange(e);\n    });\n\n    // Cleanup when page unloads\n    window.addEventListener('beforeunload', () => {\n      this.cleanup();\n    });\n\n    // Start polling for cross-device communication\n    this.startPolling();\n\n    // Load initial data\n    this.loadInitialData();\n\n    // Send heartbeat to show we're active\n    this.sendHeartbeat();\n  }\n\n  // Load initial data from localStorage\n  loadInitialData() {\n    try {\n      const messages = localStorage.getItem(this.STORAGE_KEYS.MESSAGES);\n      if (messages) {\n        this.messages = JSON.parse(messages);\n        this.lastMessageCount = this.messages.length;\n      }\n      const users = localStorage.getItem(this.STORAGE_KEYS.USERS);\n      if (users) {\n        const userData = JSON.parse(users);\n        this.activeUsers = new Set(userData.users || []);\n        this.lastUserUpdate = userData.timestamp || 0;\n      }\n    } catch (error) {\n      console.error('Error loading initial data:', error);\n    }\n  }\n\n  // Start polling for changes (for cross-device communication)\n  startPolling() {\n    this.pollInterval = setInterval(() => {\n      this.checkForUpdates();\n      this.sendHeartbeat();\n      this.cleanupInactiveUsers();\n    }, 1000); // Poll every second\n  }\n\n  // Check for updates in localStorage\n  checkForUpdates() {\n    try {\n      // Check for new messages\n      const messages = localStorage.getItem(this.STORAGE_KEYS.MESSAGES);\n      if (messages) {\n        const parsedMessages = JSON.parse(messages);\n        if (parsedMessages.length !== this.lastMessageCount) {\n          this.messages = parsedMessages;\n          this.lastMessageCount = parsedMessages.length;\n          this.notifyMessageListeners();\n        }\n      }\n\n      // Check for user updates\n      const users = localStorage.getItem(this.STORAGE_KEYS.USERS);\n      if (users) {\n        const userData = JSON.parse(users);\n        if (userData.timestamp > this.lastUserUpdate) {\n          this.activeUsers = new Set(userData.users || []);\n          this.lastUserUpdate = userData.timestamp;\n          this.notifyUserListeners();\n        }\n      }\n    } catch (error) {\n      console.error('Error checking for updates:', error);\n    }\n  }\n\n  // Handle storage events (cross-browser on same device)\n  handleStorageChange(event) {\n    if (event.key === this.STORAGE_KEYS.MESSAGES) {\n      try {\n        const newMessages = event.newValue ? JSON.parse(event.newValue) : [];\n        this.messages = newMessages;\n        this.lastMessageCount = newMessages.length;\n        this.notifyMessageListeners();\n      } catch (error) {\n        console.error('Error handling message storage change:', error);\n      }\n    } else if (event.key === this.STORAGE_KEYS.USERS) {\n      try {\n        const userData = event.newValue ? JSON.parse(event.newValue) : {\n          users: [],\n          timestamp: 0\n        };\n        this.activeUsers = new Set(userData.users || []);\n        this.lastUserUpdate = userData.timestamp;\n        this.notifyUserListeners();\n      } catch (error) {\n        console.error('Error handling user storage change:', error);\n      }\n    }\n  }\n\n  // Set current user\n  setCurrentUser(username) {\n    if (this.currentUser) {\n      this.removeUser(this.currentUser);\n    }\n    if (username) {\n      this.currentUser = username;\n      this.addUser(username);\n    } else {\n      this.currentUser = null;\n    }\n  }\n\n  // Add user to active users\n  addUser(username) {\n    this.activeUsers.add(username);\n    this.updateUsersInStorage();\n  }\n\n  // Remove user from active users\n  removeUser(username) {\n    this.activeUsers.delete(username);\n    this.updateUsersInStorage();\n  }\n\n  // Update users in localStorage\n  updateUsersInStorage() {\n    try {\n      const userData = {\n        users: Array.from(this.activeUsers),\n        timestamp: Date.now()\n      };\n      localStorage.setItem(this.STORAGE_KEYS.USERS, JSON.stringify(userData));\n      this.lastUserUpdate = userData.timestamp;\n      this.notifyUserListeners();\n    } catch (error) {\n      console.error('Error updating users in storage:', error);\n    }\n  }\n\n  // Send heartbeat to show we're still active\n  sendHeartbeat() {\n    if (this.currentUser) {\n      try {\n        const heartbeats = JSON.parse(localStorage.getItem(this.STORAGE_KEYS.HEARTBEAT) || '{}');\n        heartbeats[this.currentUser] = {\n          timestamp: Date.now(),\n          sessionId: this.sessionId\n        };\n        localStorage.setItem(this.STORAGE_KEYS.HEARTBEAT, JSON.stringify(heartbeats));\n      } catch (error) {\n        console.error('Error sending heartbeat:', error);\n      }\n    }\n  }\n\n  // Clean up inactive users (haven't sent heartbeat in 5 seconds)\n  cleanupInactiveUsers() {\n    try {\n      const heartbeats = JSON.parse(localStorage.getItem(this.STORAGE_KEYS.HEARTBEAT) || '{}');\n      const now = Date.now();\n      const activeUsers = new Set();\n      let hasChanges = false;\n\n      // Check which users are still active\n      Object.keys(heartbeats).forEach(user => {\n        if (now - heartbeats[user].timestamp < 5000) {\n          // 5 second timeout\n          activeUsers.add(user);\n        } else {\n          hasChanges = true;\n          delete heartbeats[user];\n        }\n      });\n      if (hasChanges) {\n        localStorage.setItem(this.STORAGE_KEYS.HEARTBEAT, JSON.stringify(heartbeats));\n\n        // Update active users if there are changes\n        if (this.activeUsers.size !== activeUsers.size || !Array.from(activeUsers).every(user => this.activeUsers.has(user))) {\n          this.activeUsers = activeUsers;\n          this.updateUsersInStorage();\n        }\n      }\n    } catch (error) {\n      console.error('Error cleaning up inactive users:', error);\n    }\n  }\n\n  // Send a message\n  sendMessage(text) {\n    if (!this.currentUser || !text.trim()) return;\n    const message = {\n      id: Date.now() + Math.random(),\n      text: text.trim(),\n      sender: this.currentUser,\n      timestamp: new Date().toISOString()\n    };\n    try {\n      this.messages.push(message);\n      localStorage.setItem(this.STORAGE_KEYS.MESSAGES, JSON.stringify(this.messages));\n      this.lastMessageCount = this.messages.length;\n      this.notifyMessageListeners();\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  }\n\n  // Get all messages\n  getMessages() {\n    return [...this.messages];\n  }\n\n  // Get active users\n  getActiveUsers() {\n    return Array.from(this.activeUsers);\n  }\n\n  // Clear all messages\n  clearChat() {\n    try {\n      this.messages = [];\n      localStorage.setItem(this.STORAGE_KEYS.MESSAGES, JSON.stringify(this.messages));\n      this.lastMessageCount = 0;\n      this.notifyMessageListeners();\n    } catch (error) {\n      console.error('Error clearing chat:', error);\n    }\n  }\n\n  // Add message listener\n  onMessage(callback) {\n    this.messageListeners.push(callback);\n    return () => {\n      this.messageListeners = this.messageListeners.filter(cb => cb !== callback);\n    };\n  }\n\n  // Add user listener\n  onUsersChange(callback) {\n    this.userListeners.push(callback);\n    return () => {\n      this.userListeners = this.userListeners.filter(cb => cb !== callback);\n    };\n  }\n\n  // Notify message listeners\n  notifyMessageListeners() {\n    this.messageListeners.forEach(callback => {\n      try {\n        callback(this.messages);\n      } catch (error) {\n        console.error('Message listener error:', error);\n      }\n    });\n  }\n\n  // Notify user listeners\n  notifyUserListeners() {\n    this.userListeners.forEach(callback => {\n      try {\n        callback(Array.from(this.activeUsers));\n      } catch (error) {\n        console.error('User listener error:', error);\n      }\n    });\n  }\n\n  // Cleanup when leaving\n  cleanup() {\n    if (this.currentUser) {\n      this.removeUser(this.currentUser);\n    }\n    if (this.pollInterval) {\n      clearInterval(this.pollInterval);\n    }\n  }\n}\n\n// Create singleton instance\nconst chatService = new ChatService();\nexport default chatService;","map":{"version":3,"names":["ChatService","constructor","messages","currentUser","messageListeners","userListeners","activeUsers","Set","pollInterval","lastMessageCount","lastUserUpdate","sessionId","Date","now","Math","random","STORAGE_KEYS","MESSAGES","USERS","HEARTBEAT","window","addEventListener","e","handleStorageChange","cleanup","startPolling","loadInitialData","sendHeartbeat","localStorage","getItem","JSON","parse","length","users","userData","timestamp","error","console","setInterval","checkForUpdates","cleanupInactiveUsers","parsedMessages","notifyMessageListeners","notifyUserListeners","event","key","newMessages","newValue","setCurrentUser","username","removeUser","addUser","add","updateUsersInStorage","delete","Array","from","setItem","stringify","heartbeats","hasChanges","Object","keys","forEach","user","size","every","has","sendMessage","text","trim","message","id","sender","toISOString","push","getMessages","getActiveUsers","clearChat","onMessage","callback","filter","cb","onUsersChange","clearInterval","chatService"],"sources":["/home/niroj/Desktop/chatapp/src/utils/chatService.js"],"sourcesContent":["// Chat service using localStorage and storage events for cross-browser/device communication\n// Works across different browsers and devices on the same network\n\nclass ChatService {\n  constructor() {\n    this.messages = [];\n    this.currentUser = null;\n    this.messageListeners = [];\n    this.userListeners = [];\n    this.activeUsers = new Set();\n    this.pollInterval = null;\n    this.lastMessageCount = 0;\n    this.lastUserUpdate = 0;\n    this.sessionId = Date.now() + Math.random(); // Unique session ID\n    \n    // Storage keys\n    this.STORAGE_KEYS = {\n      MESSAGES: 'chatapp_messages',\n      USERS: 'chatapp_active_users',\n      HEARTBEAT: 'chatapp_heartbeat'\n    };\n    \n    // Listen for storage events (works across browsers on same device)\n    window.addEventListener('storage', (e) => {\n      this.handleStorageChange(e);\n    });\n\n    // Cleanup when page unloads\n    window.addEventListener('beforeunload', () => {\n      this.cleanup();\n    });\n\n    // Start polling for cross-device communication\n    this.startPolling();\n    \n    // Load initial data\n    this.loadInitialData();\n    \n    // Send heartbeat to show we're active\n    this.sendHeartbeat();\n  }\n\n  // Load initial data from localStorage\n  loadInitialData() {\n    try {\n      const messages = localStorage.getItem(this.STORAGE_KEYS.MESSAGES);\n      if (messages) {\n        this.messages = JSON.parse(messages);\n        this.lastMessageCount = this.messages.length;\n      }\n      \n      const users = localStorage.getItem(this.STORAGE_KEYS.USERS);\n      if (users) {\n        const userData = JSON.parse(users);\n        this.activeUsers = new Set(userData.users || []);\n        this.lastUserUpdate = userData.timestamp || 0;\n      }\n    } catch (error) {\n      console.error('Error loading initial data:', error);\n    }\n  }\n\n  // Start polling for changes (for cross-device communication)\n  startPolling() {\n    this.pollInterval = setInterval(() => {\n      this.checkForUpdates();\n      this.sendHeartbeat();\n      this.cleanupInactiveUsers();\n    }, 1000); // Poll every second\n  }\n\n  // Check for updates in localStorage\n  checkForUpdates() {\n    try {\n      // Check for new messages\n      const messages = localStorage.getItem(this.STORAGE_KEYS.MESSAGES);\n      if (messages) {\n        const parsedMessages = JSON.parse(messages);\n        if (parsedMessages.length !== this.lastMessageCount) {\n          this.messages = parsedMessages;\n          this.lastMessageCount = parsedMessages.length;\n          this.notifyMessageListeners();\n        }\n      }\n      \n      // Check for user updates\n      const users = localStorage.getItem(this.STORAGE_KEYS.USERS);\n      if (users) {\n        const userData = JSON.parse(users);\n        if (userData.timestamp > this.lastUserUpdate) {\n          this.activeUsers = new Set(userData.users || []);\n          this.lastUserUpdate = userData.timestamp;\n          this.notifyUserListeners();\n        }\n      }\n    } catch (error) {\n      console.error('Error checking for updates:', error);\n    }\n  }\n\n  // Handle storage events (cross-browser on same device)\n  handleStorageChange(event) {\n    if (event.key === this.STORAGE_KEYS.MESSAGES) {\n      try {\n        const newMessages = event.newValue ? JSON.parse(event.newValue) : [];\n        this.messages = newMessages;\n        this.lastMessageCount = newMessages.length;\n        this.notifyMessageListeners();\n      } catch (error) {\n        console.error('Error handling message storage change:', error);\n      }\n    } else if (event.key === this.STORAGE_KEYS.USERS) {\n      try {\n        const userData = event.newValue ? JSON.parse(event.newValue) : { users: [], timestamp: 0 };\n        this.activeUsers = new Set(userData.users || []);\n        this.lastUserUpdate = userData.timestamp;\n        this.notifyUserListeners();\n      } catch (error) {\n        console.error('Error handling user storage change:', error);\n      }\n    }\n  }\n\n  // Set current user\n  setCurrentUser(username) {\n    if (this.currentUser) {\n      this.removeUser(this.currentUser);\n    }\n    \n    if (username) {\n      this.currentUser = username;\n      this.addUser(username);\n    } else {\n      this.currentUser = null;\n    }\n  }\n\n  // Add user to active users\n  addUser(username) {\n    this.activeUsers.add(username);\n    this.updateUsersInStorage();\n  }\n\n  // Remove user from active users\n  removeUser(username) {\n    this.activeUsers.delete(username);\n    this.updateUsersInStorage();\n  }\n\n  // Update users in localStorage\n  updateUsersInStorage() {\n    try {\n      const userData = {\n        users: Array.from(this.activeUsers),\n        timestamp: Date.now()\n      };\n      localStorage.setItem(this.STORAGE_KEYS.USERS, JSON.stringify(userData));\n      this.lastUserUpdate = userData.timestamp;\n      this.notifyUserListeners();\n    } catch (error) {\n      console.error('Error updating users in storage:', error);\n    }\n  }\n\n  // Send heartbeat to show we're still active\n  sendHeartbeat() {\n    if (this.currentUser) {\n      try {\n        const heartbeats = JSON.parse(localStorage.getItem(this.STORAGE_KEYS.HEARTBEAT) || '{}');\n        heartbeats[this.currentUser] = {\n          timestamp: Date.now(),\n          sessionId: this.sessionId\n        };\n        localStorage.setItem(this.STORAGE_KEYS.HEARTBEAT, JSON.stringify(heartbeats));\n      } catch (error) {\n        console.error('Error sending heartbeat:', error);\n      }\n    }\n  }\n\n  // Clean up inactive users (haven't sent heartbeat in 5 seconds)\n  cleanupInactiveUsers() {\n    try {\n      const heartbeats = JSON.parse(localStorage.getItem(this.STORAGE_KEYS.HEARTBEAT) || '{}');\n      const now = Date.now();\n      const activeUsers = new Set();\n      let hasChanges = false;\n\n      // Check which users are still active\n      Object.keys(heartbeats).forEach(user => {\n        if (now - heartbeats[user].timestamp < 5000) { // 5 second timeout\n          activeUsers.add(user);\n        } else {\n          hasChanges = true;\n          delete heartbeats[user];\n        }\n      });\n\n      if (hasChanges) {\n        localStorage.setItem(this.STORAGE_KEYS.HEARTBEAT, JSON.stringify(heartbeats));\n        \n        // Update active users if there are changes\n        if (this.activeUsers.size !== activeUsers.size || \n            !Array.from(activeUsers).every(user => this.activeUsers.has(user))) {\n          this.activeUsers = activeUsers;\n          this.updateUsersInStorage();\n        }\n      }\n    } catch (error) {\n      console.error('Error cleaning up inactive users:', error);\n    }\n  }\n\n  // Send a message\n  sendMessage(text) {\n    if (!this.currentUser || !text.trim()) return;\n\n    const message = {\n      id: Date.now() + Math.random(),\n      text: text.trim(),\n      sender: this.currentUser,\n      timestamp: new Date().toISOString()\n    };\n\n    try {\n      this.messages.push(message);\n      localStorage.setItem(this.STORAGE_KEYS.MESSAGES, JSON.stringify(this.messages));\n      this.lastMessageCount = this.messages.length;\n      this.notifyMessageListeners();\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  }\n\n  // Get all messages\n  getMessages() {\n    return [...this.messages];\n  }\n\n  // Get active users\n  getActiveUsers() {\n    return Array.from(this.activeUsers);\n  }\n\n  // Clear all messages\n  clearChat() {\n    try {\n      this.messages = [];\n      localStorage.setItem(this.STORAGE_KEYS.MESSAGES, JSON.stringify(this.messages));\n      this.lastMessageCount = 0;\n      this.notifyMessageListeners();\n    } catch (error) {\n      console.error('Error clearing chat:', error);\n    }\n  }\n\n  // Add message listener\n  onMessage(callback) {\n    this.messageListeners.push(callback);\n    return () => {\n      this.messageListeners = this.messageListeners.filter(cb => cb !== callback);\n    };\n  }\n\n  // Add user listener\n  onUsersChange(callback) {\n    this.userListeners.push(callback);\n    return () => {\n      this.userListeners = this.userListeners.filter(cb => cb !== callback);\n    };\n  }\n\n  // Notify message listeners\n  notifyMessageListeners() {\n    this.messageListeners.forEach(callback => {\n      try {\n        callback(this.messages);\n      } catch (error) {\n        console.error('Message listener error:', error);\n      }\n    });\n  }\n\n  // Notify user listeners\n  notifyUserListeners() {\n    this.userListeners.forEach(callback => {\n      try {\n        callback(Array.from(this.activeUsers));\n      } catch (error) {\n        console.error('User listener error:', error);\n      }\n    });\n  }\n\n  // Cleanup when leaving\n  cleanup() {\n    if (this.currentUser) {\n      this.removeUser(this.currentUser);\n    }\n    \n    if (this.pollInterval) {\n      clearInterval(this.pollInterval);\n    }\n  }\n}\n\n// Create singleton instance\nconst chatService = new ChatService();\n\nexport default chatService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}