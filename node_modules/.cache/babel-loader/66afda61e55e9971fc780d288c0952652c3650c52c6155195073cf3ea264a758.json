{"ast":null,"code":"// Chat service using BroadcastChannel for cross-tab/window communication\n// Everything is temporary - no localStorage persistence\n\nclass ChatService {\n  constructor() {\n    this.channel = new BroadcastChannel('chatapp-channel');\n    this.messages = [];\n    this.currentUser = null;\n    this.messageListeners = [];\n    this.userListeners = [];\n    this.activeUsers = new Set();\n\n    // Listen for messages from other tabs/windows\n    this.channel.addEventListener('message', event => {\n      this.handleBroadcastMessage(event.data);\n    });\n\n    // Cleanup when page unloads\n    window.addEventListener('beforeunload', () => {\n      if (this.currentUser) {\n        this.broadcastUserLeft(this.currentUser);\n      }\n      this.channel.close();\n    });\n\n    // Request active users when service starts\n    this.requestActiveUsers();\n  }\n\n  // Set current user and announce to other tabs\n  setCurrentUser(username) {\n    if (this.currentUser) {\n      this.broadcastUserLeft(this.currentUser);\n    }\n    this.currentUser = username;\n    this.broadcastUserJoined(username);\n    this.notifyUserListeners();\n  }\n\n  // Send a message\n  sendMessage(text) {\n    if (!this.currentUser || !text.trim()) return;\n    const message = {\n      id: Date.now() + Math.random(),\n      text: text.trim(),\n      sender: this.currentUser,\n      timestamp: new Date().toISOString()\n    };\n\n    // Add to local messages\n    this.messages.push(message);\n\n    // Broadcast to other tabs\n    this.broadcastMessage({\n      type: 'NEW_MESSAGE',\n      message\n    });\n\n    // Notify local listeners\n    this.notifyMessageListeners();\n  }\n\n  // Get all messages\n  getMessages() {\n    return [...this.messages];\n  }\n\n  // Get active users\n  getActiveUsers() {\n    return Array.from(this.activeUsers);\n  }\n\n  // Add message listener\n  onMessage(callback) {\n    this.messageListeners.push(callback);\n    return () => {\n      this.messageListeners = this.messageListeners.filter(cb => cb !== callback);\n    };\n  }\n\n  // Add user listener\n  onUsersChange(callback) {\n    this.userListeners.push(callback);\n    return () => {\n      this.userListeners = this.userListeners.filter(cb => cb !== callback);\n    };\n  }\n\n  // Handle broadcast messages from other tabs\n  handleBroadcastMessage(data) {\n    switch (data.type) {\n      case 'NEW_MESSAGE':\n        // Don't add our own messages again\n        if (data.message.sender !== this.currentUser) {\n          this.messages.push(data.message);\n          this.notifyMessageListeners();\n        }\n        break;\n      case 'USER_JOINED':\n        this.activeUsers.add(data.username);\n        this.notifyUserListeners();\n\n        // Respond with our presence if we have a user\n        if (this.currentUser) {\n          this.broadcastUserJoined(this.currentUser);\n        }\n        break;\n      case 'USER_LEFT':\n        this.activeUsers.delete(data.username);\n        this.notifyUserListeners();\n        break;\n      case 'REQUEST_USERS':\n        // Someone is asking for active users, respond if we have a user\n        if (this.currentUser) {\n          this.broadcastUserJoined(this.currentUser);\n        }\n        break;\n      case 'CLEAR_CHAT':\n        this.messages = [];\n        this.notifyMessageListeners();\n        break;\n    }\n  }\n\n  // Broadcast message to other tabs\n  broadcastMessage(data) {\n    try {\n      this.channel.postMessage(data);\n    } catch (error) {\n      console.error('Failed to broadcast message:', error);\n    }\n  }\n\n  // Broadcast user joined\n  broadcastUserJoined(username) {\n    this.activeUsers.add(username);\n    this.broadcastMessage({\n      type: 'USER_JOINED',\n      username\n    });\n  }\n\n  // Broadcast user left\n  broadcastUserLeft(username) {\n    this.activeUsers.delete(username);\n    this.broadcastMessage({\n      type: 'USER_LEFT',\n      username\n    });\n  }\n\n  // Request active users from other tabs\n  requestActiveUsers() {\n    this.broadcastMessage({\n      type: 'REQUEST_USERS'\n    });\n  }\n\n  // Clear all messages (for all tabs)\n  clearChat() {\n    this.messages = [];\n    this.broadcastMessage({\n      type: 'CLEAR_CHAT'\n    });\n    this.notifyMessageListeners();\n  }\n\n  // Notify message listeners\n  notifyMessageListeners() {\n    this.messageListeners.forEach(callback => {\n      try {\n        callback(this.messages);\n      } catch (error) {\n        console.error('Message listener error:', error);\n      }\n    });\n  }\n\n  // Notify user listeners\n  notifyUserListeners() {\n    this.userListeners.forEach(callback => {\n      try {\n        callback(Array.from(this.activeUsers));\n      } catch (error) {\n        console.error('User listener error:', error);\n      }\n    });\n  }\n}\n\n// Create singleton instance\nconst chatService = new ChatService();\nexport default chatService;","map":{"version":3,"names":["ChatService","constructor","channel","BroadcastChannel","messages","currentUser","messageListeners","userListeners","activeUsers","Set","addEventListener","event","handleBroadcastMessage","data","window","broadcastUserLeft","close","requestActiveUsers","setCurrentUser","username","broadcastUserJoined","notifyUserListeners","sendMessage","text","trim","message","id","Date","now","Math","random","sender","timestamp","toISOString","push","broadcastMessage","type","notifyMessageListeners","getMessages","getActiveUsers","Array","from","onMessage","callback","filter","cb","onUsersChange","add","delete","postMessage","error","console","clearChat","forEach","chatService"],"sources":["/home/niroj/Desktop/chatapp/src/utils/chatService.js"],"sourcesContent":["// Chat service using BroadcastChannel for cross-tab/window communication\n// Everything is temporary - no localStorage persistence\n\nclass ChatService {\n  constructor() {\n    this.channel = new BroadcastChannel('chatapp-channel');\n    this.messages = [];\n    this.currentUser = null;\n    this.messageListeners = [];\n    this.userListeners = [];\n    this.activeUsers = new Set();\n    \n    // Listen for messages from other tabs/windows\n    this.channel.addEventListener('message', (event) => {\n      this.handleBroadcastMessage(event.data);\n    });\n\n    // Cleanup when page unloads\n    window.addEventListener('beforeunload', () => {\n      if (this.currentUser) {\n        this.broadcastUserLeft(this.currentUser);\n      }\n      this.channel.close();\n    });\n\n    // Request active users when service starts\n    this.requestActiveUsers();\n  }\n\n  // Set current user and announce to other tabs\n  setCurrentUser(username) {\n    if (this.currentUser) {\n      this.broadcastUserLeft(this.currentUser);\n    }\n    \n    this.currentUser = username;\n    this.broadcastUserJoined(username);\n    this.notifyUserListeners();\n  }\n\n  // Send a message\n  sendMessage(text) {\n    if (!this.currentUser || !text.trim()) return;\n\n    const message = {\n      id: Date.now() + Math.random(),\n      text: text.trim(),\n      sender: this.currentUser,\n      timestamp: new Date().toISOString()\n    };\n\n    // Add to local messages\n    this.messages.push(message);\n    \n    // Broadcast to other tabs\n    this.broadcastMessage({\n      type: 'NEW_MESSAGE',\n      message\n    });\n\n    // Notify local listeners\n    this.notifyMessageListeners();\n  }\n\n  // Get all messages\n  getMessages() {\n    return [...this.messages];\n  }\n\n  // Get active users\n  getActiveUsers() {\n    return Array.from(this.activeUsers);\n  }\n\n  // Add message listener\n  onMessage(callback) {\n    this.messageListeners.push(callback);\n    return () => {\n      this.messageListeners = this.messageListeners.filter(cb => cb !== callback);\n    };\n  }\n\n  // Add user listener\n  onUsersChange(callback) {\n    this.userListeners.push(callback);\n    return () => {\n      this.userListeners = this.userListeners.filter(cb => cb !== callback);\n    };\n  }\n\n  // Handle broadcast messages from other tabs\n  handleBroadcastMessage(data) {\n    switch (data.type) {\n      case 'NEW_MESSAGE':\n        // Don't add our own messages again\n        if (data.message.sender !== this.currentUser) {\n          this.messages.push(data.message);\n          this.notifyMessageListeners();\n        }\n        break;\n        \n      case 'USER_JOINED':\n        this.activeUsers.add(data.username);\n        this.notifyUserListeners();\n        \n        // Respond with our presence if we have a user\n        if (this.currentUser) {\n          this.broadcastUserJoined(this.currentUser);\n        }\n        break;\n        \n      case 'USER_LEFT':\n        this.activeUsers.delete(data.username);\n        this.notifyUserListeners();\n        break;\n        \n      case 'REQUEST_USERS':\n        // Someone is asking for active users, respond if we have a user\n        if (this.currentUser) {\n          this.broadcastUserJoined(this.currentUser);\n        }\n        break;\n        \n      case 'CLEAR_CHAT':\n        this.messages = [];\n        this.notifyMessageListeners();\n        break;\n    }\n  }\n\n  // Broadcast message to other tabs\n  broadcastMessage(data) {\n    try {\n      this.channel.postMessage(data);\n    } catch (error) {\n      console.error('Failed to broadcast message:', error);\n    }\n  }\n\n  // Broadcast user joined\n  broadcastUserJoined(username) {\n    this.activeUsers.add(username);\n    this.broadcastMessage({\n      type: 'USER_JOINED',\n      username\n    });\n  }\n\n  // Broadcast user left\n  broadcastUserLeft(username) {\n    this.activeUsers.delete(username);\n    this.broadcastMessage({\n      type: 'USER_LEFT',\n      username\n    });\n  }\n\n  // Request active users from other tabs\n  requestActiveUsers() {\n    this.broadcastMessage({\n      type: 'REQUEST_USERS'\n    });\n  }\n\n  // Clear all messages (for all tabs)\n  clearChat() {\n    this.messages = [];\n    this.broadcastMessage({\n      type: 'CLEAR_CHAT'\n    });\n    this.notifyMessageListeners();\n  }\n\n  // Notify message listeners\n  notifyMessageListeners() {\n    this.messageListeners.forEach(callback => {\n      try {\n        callback(this.messages);\n      } catch (error) {\n        console.error('Message listener error:', error);\n      }\n    });\n  }\n\n  // Notify user listeners\n  notifyUserListeners() {\n    this.userListeners.forEach(callback => {\n      try {\n        callback(Array.from(this.activeUsers));\n      } catch (error) {\n        console.error('User listener error:', error);\n      }\n    });\n  }\n}\n\n// Create singleton instance\nconst chatService = new ChatService();\n\nexport default chatService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}